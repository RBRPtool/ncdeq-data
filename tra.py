# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# dissolve.py
# Created on: 2016-04-26 12:03:19.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: dissolve <input_data>
# Description:
# ---------------------------------------------------------------------------
#run this second no args
#C:\Python27\ArcGIS10.3\python.exe tra.py
# Import arcpy module
import arcpy
import json
import os


# Script arguments
input_data = arcpy.GetParameterAsText(0)

# Local variables:

#input data
path = "E:\\ncdeq\\DMS_RBRP.gdb"
temp_dissolve = "E:\\DMS_RBRP.gdb\\temp_dissolve"

#output data
outPathGDB = "E:\\ncdeq\\code\\ncdeq-data"
outGDB = "RDRBP_AGO.gdb"


#uplift data
with open('json/tra_mapping.json') as data_file:
    tra_data = json.load(data_file)

#transposed_template data
with open('json/transposed_template.json') as data_file:
    transposedTemplate = json.load(data_file)

outGDBFull =  os.path.join(outPathGDB, outGDB)


#result data
transposed =  os.path.join(outGDBFull, 'ncdeq_normailized')


for field in transposedTemplate:
	fieldName = field['fieldname']
	fieldType = field['fieldType']
	fieldLength = field['Length']
	arcpy.AddField_management(transposed, fieldName, fieldType, "", "", fieldLength, "", "NULLABLE", "NON_REQUIRED", "")

#add name fields for dissovled huc data where do I get that
#update the ago db. later

#check if field exists
def FieldExist(featureclass, fieldname):
	fieldList = arcpy.ListFields(featureclass, fieldname)

	fieldCount = len(fieldList)

	if (fieldCount == 1):
		return True
	else:
		return False


#transposed_template data
with open('json/geography_levels_tra.json') as data_file:
    geographyLevels = json.load(data_file)

aggreatate_type = "SUM"
area_AreaSqKM = 'AreaSqKM'
area_AreaShape = 'Shape_Area'

chartTypes = [{'name':'TRA',
			   'table':'TRA',
			   'fields_conversion':tra_data,
			   'fields_dissovled': [['ALL_uplift', aggreatate_type],
			   						['Hab_uplift_WetlandsBMPs', aggreatate_type],
			   						['Hab_uplift_AvdConv',aggreatate_type],
			   						['Hab_uplift_AqCon', aggreatate_type],
			   						['Hab_uplift_Restoration',aggreatate_type],
			   						['Hab_uplift_norm',aggreatate_type],
									['Hydro_uplift_norm', aggreatate_type],
									['WQ_uplift_norm', aggreatate_type],
									['MeanLikelihood_norm',area_AreaShape],
									['q2yr_base_norm',area_AreaSqKM],
									['q10yr_base_norm',area_AreaSqKM],
									['q50yr_base_norm',area_AreaSqKM],
									['q100yr_base_norm',area_AreaSqKM],
									['N_total_base_norm',area_AreaSqKM],
									['P_total_base_norm',area_AreaSqKM],
									['N_AG_base_norm',area_AreaSqKM],
									['N_URBAN_base_norm',area_AreaSqKM],
									['N_CMAQ2002KG_base_norm',area_AreaSqKM],
									['P_AG_base_norm',area_AreaSqKM],
									['P_URBAN_base_norm',area_AreaSqKM]
				}]

#walk the chart types object and dissolve and transpose (normalize) the data
for chartType in chartTypes:
	print 'Chart Type: ' + chartType['name']
	chartTypeName = chartType['name']

	inputFC =  os.path.join(path, chartType['table'])

	#get fields in input data
	fields = arcpy.ListFields(  os.path.join(path, inputFC)  )

	#get json data for how to deal with each field
	input_dict = chartType['fields_conversion']


	for geog in geographyLevels:
		currentGeographyLevel = geog['TRA_Name']
		print 'Dissolve: ' + currentGeographyLevel
		print '  ' + geog['level']

		temp_dissolve = os.path.join(outGDBFull, geog['level'])
	 	dissolve = os.path.join(outGDBFull, 'dissolve')

		#if feature class exists delete
		if arcpy.Exists(temp_dissolve):
			arcpy.Delete_management(temp_dissolve)

		#dissolve on geographyLevels
		StatisticsFields = chartType['fields_dissovled']

		arcpy.Dissolve_management(inputFC, temp_dissolve, geog['fieldName'], StatisticsFields, "MULTI_PART", "DISSOLVE_LINES" )

		#iterate fields and to send dissolve
		for field in fields:

			#find matching instance of field on data.
			#then use this to construct the dissilove varriables.
			output_dict = [x for x in input_dict if x['fieldName'] == field.name]

			#if field exists in template we will use the field in output ddata.
			#  need to know who we want the table data formated - derieved from tempatle json
			if (output_dict):
				transposeField = output_dict[0]['fieldName']
				temp_transposed = os.path.join(outGDB, 'temp_transposed_' + currentGeographyLevel + '_'  + transposeField)

				#if feature class exists delete
				if arcpy.Exists(temp_transposed):
					arcpy.Delete_management(temp_transposed)

                #dissovle the geography level
				arcpy.TransposeFields_management(temp_dissolve, aggreatate_type + "_" + transposeField + " " + aggreatate_type +"_" + transposeField, temp_transposed, "chart_label", "chart_value",  geog['fieldName'])

				print '  ' + transposeField
				for f in output_dict[0]:
					print '    ' + f

                #add fields from template to the normalized table if they do not exist
				for field in transposedTemplate:
					fieldName = field['fieldname']
					fieldType = field['fieldType']
					fieldLength = field['Length']
					if not FieldExist(temp_transposed,fieldName):
						arcpy.AddField_management(temp_transposed, fieldName, fieldType, "", "", fieldLength, "", "NULLABLE", "NON_REQUIRED", "")


				# Process: calculate_geography_level
				arcpy.CalculateField_management(temp_transposed, "geography_level",   geog['geographyLevel'], "PYTHON", "")

				# Process: calculate_geography_match_id
				if  geog['level'] == 'Catchment':
					arcpy.CalculateField_management(temp_transposed, "geography_match_id",  "!"+ geog['match']+"!", "PYTHON", "")
				else:
					arcpy.CalculateField_management(temp_transposed, "geography_match_id", "!"+currentGeographyLevel+"![0:"+ geog['match']+"]", "PYTHON", "")

				arcpy.CalculateField_management(temp_transposed, "chart_description", "'" + output_dict[0]['chartDescription'] + "'", "PYTHON", "")

				# Process: Calculate_chart_type
				arcpy.CalculateField_management(temp_transposed, "chart_id","'" + output_dict[0]['chartId'] + "'" , "PYTHON", "")

				# Process: Calculate_chart_type
				arcpy.CalculateField_management(temp_transposed, "chart_matchid","'" + output_dict[0]['chartMatchId'] + "'" , "PYTHON", "")

				# Process: Calculate_chart_type
				arcpy.CalculateField_management(temp_transposed, "chart_type","'" + output_dict[0]['chartType'] + "'" , "PYTHON", "")

				# Process: Calculate_chart_level_label
				arcpy.CalculateField_management(temp_transposed, "chart_level_label", "'" + output_dict[0]['chartLabel'] + "'", "PYTHON", "")

				# Process: Calculate_chart_level
				arcpy.CalculateField_management(temp_transposed, "chart_level", "'" + output_dict[0]['chartLevel'] + "'", "PYTHON", "")

				arcpy.CalculateField_management(temp_transposed, "ID", "!" + geog['TRA_Name'] + "!" , "PYTHON", "")

				# Process: Calculate_id
				arcpy.CalculateField_management(temp_transposed, "geography_label", """"TRA" +" " +  !TRA_TYPE!""", "PYTHON", "")

				#round to two decimealss
				arcpy.CalculateField_management(temp_transposed, "chart_value", "round(float(!chart_value!),8)", "PYTHON", "")

				if FieldExist(inputFC,currentGeographyLevel):
					deleteFields = []
					deleteFields.append( geog['fieldName'][1] )
					t = arcpy.DeleteField_management(temp_transposed, deleteFields)


				if FieldExist(inputFC,currentGeographyLevel):
					deleteFields = []
					deleteFields.append(currentGeographyLevel)
					t = arcpy.DeleteField_management(temp_transposed, deleteFields)

				#remove huc12
				if FieldExist(temp_transposed,'FIRST_HUC_12'):
					deleteFields = []
					deleteFields.append('FIRST_HUC_12')
					t = arcpy.DeleteField_management(temp_transposed, deleteFields)

				if FieldExist(temp_dissolve, aggreatate_type + "_" + transposeField):
					deleteFields =[]
					deleteFields.append( aggreatate_type + "_" + transposeField)
					arcpy.DeleteField_management(temp_dissolve, deleteFields)

				#append to transpose
				arcpy.Append_management(temp_transposed,transposed)

				#delete temp transpose
				if arcpy.Exists(temp_transposed):
					arcpy.Delete_management(temp_transposed)

for geog in geographyLevels:
	temp_dissolve = os.path.join(outGDBFull, geog['level'])

	if FieldExist(temp_dissolve, geog['fieldName'][0]):
		arcpy.AlterField_management(temp_dissolve,  geog['fieldName'][0], "ID", "ID", "", "", "NON_NULLABLE", "false")
		# arcpy.CalculateField_management(temp_transposed, geog['fieldName'][0], geog['fieldName'][0] + " " + geog['fieldName'][0], "PYTHON", "")


	if FieldExist(temp_dissolve, 'FIRST_HUC_12'):
		deleteFields =[]
		deleteFields.append('FIRST_HUC_12')
		arcpy.DeleteField_management(temp_dissolve, deleteFields)

#if huc_6 exists delete it
if FieldExist(inputFC,'HUC_6'):
	deleteFields = []
	deleteFields.append('HUC_6')
	t = arcpy.DeleteField_management(inputFC, deleteFields)


#process xwalk for tras to hucs
