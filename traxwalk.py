# ---------------------------------------------------------------------------
# dissolve.py
# Created on: 2016-04-26 12:03:19.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: dissolve <input_data>
# Description:
# ---------------------------------------------------------------------------
#run this fifths no args
#C:\Python27\ArcGIS10.3\python.exe traxwalk.py

import arcpy
import os

def FieldExist(featureclass, fieldname):
	fieldList = arcpy.ListFields(featureclass, fieldname)

	fieldCount = len(fieldList)

	if (fieldCount == 1):
		return True
	else:
		return False

spatial_joins = [{'name':'HUC_6'},{'name':'HUC_8'},{'name':'HUC_12'}]

target = "E:/ncdeq/DMS_RBRP.gdb/TRA"
# join_features  ="E:/ncdeq/RDRBP_AGO.gdb/HUC_8_MAP"
out_feature_class = "E:/ncdeq/DMS_RBRP.gdb/TEMP_TRA_XWALK"

join_operation  ="JOIN_ONE_TO_MANY"
join_type = "KEEP_COMMON"
match_option="INTERSECT"
search_radius=""
distance_field_name=""

mapFields = ["TRA_Name","ID"]

temp_out_path = "E:/ncdeq/DMS_RBRP.gdb"
final_out_path = "E:/ncdeq/code/ncdeq-data/RDRBP_AGO.gdb"
final_out_name = "TRA_XWALK"
xwalk = os.path.join(final_out_path, final_out_name)

temp_out_join = "TEMP_TRA_XWALK"
out_feature_class = os.path.join(temp_out_path, temp_out_join)

temp_out_table = "TEMP_TRA_XWALK_CopyRows"
temp_out = os.path.join(temp_out_path, temp_out_table)



#if feature class exists delete
if arcpy.Exists(xwalk):
	arcpy.Delete_management(xwalk)

arcpy.CreateTable_management(final_out_path, final_out_name, "", "")

#transposed_template data
with open('json/tra_xwalk_template.json') as data_file:
    xwalk_Template = json.load(data_file)

for field in xwalk_Template:
	fieldName = field['fieldname']
	fieldType = field['fieldType']
	fieldLength = field['Length']
	if not FieldExist(xwalk,fieldName):
		arcpy.AddField_management(xwalk, fieldName, fieldType, "", "", fieldLength, "", "NULLABLE", "NON_REQUIRED", "")


for join in spatial_joins:

    join_in_name  = join['name'] + "_MAP"
    join_features  = os.path.join(final_out_path, join_in_name)

    fieldMappings = arcpy.FieldMappings()
    for mapField in mapFields:
        fieldMap = arcpy.FieldMap()
        if FieldExist(target, mapField):
            fieldMap.addInputField(target, mapField)

        if FieldExist(join_features, mapField):
            fieldMap.addInputField(join_features, mapField)

        fieldMappings.addFieldMap(fieldMap)


    #if feature class exists delete
    if arcpy.Exists(out_feature_class):
    	arcpy.Delete_management(out_feature_class)

    arcpy.SpatialJoin_analysis(target,
                                join_features,
                                out_feature_class,
                                join_operation,
                                join_type,
                                fieldMappings,
                                match_option,
                                search_radius,
                                distance_field_name)


    arcpy.AddField_management(out_feature_class, "TYPE", "TEXT", "", "", "100", "", "NULLABLE", "NON_REQUIRED", "")

    # Process: Calculate Field (3)
    arcpy.CalculateField_management(out_feature_class, "TYPE", "'" + join['name'] + "'", "PYTHON", "")


    #if feature class exists delete
    if arcpy.Exists(temp_out):
    	arcpy.Delete_management(temp_out)

    arcpy.CopyRows_management(out_feature_class, temp_out,"")

    fields_to_delete = ["Join_Count","TARGET_FID","JOIN_FID","Shape_Length","Shape_Area"]

    for field in fields_to_delete:
        #delete unneded fields
        if FieldExist(out_feature_class, field):
            deleteFields = []
            deleteFields.append(field)
            t = arcpy.DeleteField_management(temp_out, deleteFields)

    #append to xwalk
    arcpy.Append_management(temp_out, xwalk)

    #if feature class exists delete
    if arcpy.Exists(temp_out):
    	arcpy.Delete_management(temp_out)

    #if feature class exists delete
    if arcpy.Exists(out_feature_class):
    	arcpy.Delete_management(out_feature_class)
