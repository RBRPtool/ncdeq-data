# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# dissolve.py
# Created on: 2016-04-26 12:03:19.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: dissolve <input_data>
# Description:
# ---------------------------------------------------------------------------
#run this first no args
#C:\Python27\ArcGIS10.3\python.exe dissolve.py
# Import arcpy module
import arcpy
import json
import os


# Script arguments
input_data = arcpy.GetParameterAsText(0)

# Local variables:

#input data
path = "E:\\ncdeq\\DMS_RBRP.gdb"
temp_dissolve = "E:\\DMS_RBRP.gdb\\temp_dissolve"


#output data
outPathGDB = "E:\\ncdeq\\code\\ncdeq-data"
outGDB = "RDRBP_AGO.gdb"

#baseLine data
BaseLineData = """[{
	"fieldName": "N_CMAQ2002KG_base_norm",
	"chartDescription": "Nitrogen Source Atmosphere",
	"chartType": "BASELINE",
	"chartLabel": "Nitrogen Atmosphere",
	"chartLevel": "4",
	"chartId": "16",
	"chartMatchId": "6"
}, {
	"fieldName": "N_AG_base_norm",
	"chartDescription": "Nitrogen Source Agriculture",
	"chartType": "BASELINE",
	"chartLabel": "Nitrogen Agriculture",
	"chartLevel": "4",
	"chartId": "15",
	"chartMatchId": "6"
}, {
	"fieldName": "N_URBAN_base_norm",
	"chartDescription": "Nitrogen Source Urban",
	"chartType": "BASELINE",
	"chartLabel": "Nitrogen Urban",
	"chartLevel": "4",
	"chartId": "14",
	"chartMatchId": "6"
}, {
	"fieldName": "P_URBAN_base_norm",
	"chartDescription": "Phosphorus Source Urban",
	"chartType": "BASELINE",
	"chartLabel": "Phosphorus Urban",
	"chartLevel": "4",
	"chartId": "13",
	"chartMatchId": "5"
}, {
	"fieldName": "P_AG_base_norm",
	"chartDescription": "Phosphorus Source Agriculture",
	"chartType": "BASELINE",
	"chartLabel": "Phosphorus Agriculture",
	"chartLevel": "4",
	"chartId": "12",
	"chartMatchId": "5"
}, {
	"fieldName": "q2yr_base_norm",
	"chartDescription": "Hydrology 2 year peak flow",
	"chartType": "BASELINE",
	"chartLabel": "2 year peak",
	"chartLevel": "3",
	"chartId": "11",
	"chartMatchId": "3"
}, {
	"fieldName": "q10yr_base_norm",
	"chartDescription": "Hydrology 50 year peak flow",
	"chartType": "BASELINE",
	"chartLabel": "50 year peak",
	"chartLevel": "3",
	"chartId": "10",
	"chartMatchId": "3"
}, {
	"fieldName": "q50yr_base_norm",
	"chartDescription": "Hydrology 50 year peak flow",
	"chartType": "BASELINE",
	"chartLabel": "50 year peak",
	"chartLevel": "3",
	"chartId": "9",
	"chartMatchId": "3"
}, {
	"fieldName": "q100yr_base_norm",
	"chartDescription": "Hydrology 100 year peak flow",
	"chartType": "BASELINE",
	"chartLabel": "100 year peak",
	"chartLevel": "3",
	"chartId": "8",
	"chartMatchId": "3"
}, {
	"fieldName": "MeanLikelihood_norm",
	"chartDescription": "Total likelhood that key sepeciecs exists",
	"chartType": "BASELINE",
	"chartLabel": "Habitat Likelhood",
	"chartLevel": "3",
	"chartId": "7",
	"chartMatchId": "2"
}, {
	"fieldName": "N_total_base_norm",
	"chartDescription": "Nitrogen Baseline",
	"chartType": "BASELINE",
	"chartLabel": "Nitrogen",
	"chartLevel": "3",
	"chartId": "6",
	"chartMatchId": "4"
}, {
	"fieldName": "P_total_base_norm",
	"chartDescription": "Phosphorus Baseline",
	"chartType": "BASELINE",
	"chartLabel": "Phosphorus",
	"chartLevel": "3",
	"chartId": "5",
	"chartMatchId": "4"
}, {
	"fieldName": "WQ_base_norm",
	"chartDescription": "Total Water Quality Baseline",
	"chartType": "BASELINE",
	"chartLabel": "Water Quality",
	"chartLevel": "2",
	"chartId": "4",
	"chartMatchId": "1"
}, {
	"fieldName": "Hydro_base_norm",
	"chartDescription": "Total Hydrology Baseline",
	"chartType": "BASELINE",
	"chartLabel": "Hydrology",
	"chartLevel": "2",
	"chartId": "3",
	"chartMatchId": "1"
}, {
	"fieldName": "Hab_base_norm",
	"chartDescription": "Total Habitat Baseline",
	"chartType": "BASELINE",
	"chartLabel": "Habitat",
	"chartLevel": "2",
	"chartId": "2",
	"chartMatchId": "1"
}, {
	"fieldName": "ALL_base",
	"chartDescription": "Total Baseline",
	"chartType": "BASELINE",
	"chartLabel": "Total",
	"chartLevel": "1",
	"chartId": "1",
	"chartMatchId": "1"
}, {
	"fieldName": "HUC_12",
	"chartDescription": "",
	"chartType": "",
	"chartLabel": "",
	"chartLevel": "",
	"chartId": "0",
	"chartMatchId": "0"
}]"""


uplift_Data = """[{
	"fieldName": "BF_MeanUplift_norm",
	"chartDescription": "Habitat Change in mean species likelihood under buffer forestation scenario",
    "chartType": "UPLIFT",
	"chartLabel": "upstream buffer forestation",
	"chartLevel": "4",
	"chartId": "32",
	"chartMatchId": "22"
},{
	"fieldName": "DD_MeanUplift_norm",
	"chartDescription": "Habitat Change in mean species likelihood under downstream distance to dams scenario",
    "chartType": "UPLIFT",
	"chartLabel": "upstream decreased monthly downstream distance to dams",
	"chartLevel": "4",
	"chartId": "31",
	"chartMatchId": "21"
},{
	"fieldName": "DF_MeanUplift_norm",
	"chartDescription": "Habitat Change in mean species likelihood under decreased monthly minimum flow scenario",
    "chartType": "UPLIFT",
	"chartLabel": "upstream decreased monthly minimum flow",
	"chartLevel": "4",
	"chartId": "30",
	"chartMatchId": "22"
},{
	"fieldName": "IF_MeanUplift_norm",
	"chartDescription": "Habitat Change in mean species likelihood under increased monthly minimum flow scenario",
    "chartType": "UPLIFT",
	"chartLabel": "upstream increased monthly minimum flow",
	"chartLevel": "4",
	"chartId": "29",
	"chartMatchId": "22"
},{
	"fieldName": "NR_MeanUplift_norm",
	"chartDescription": "Habitat Change in mean species likelihood under nutrient reduction scenario",
   "chartType": "UPLIFT",
	"chartLabel": "upstream nutrient reduction",
	"chartLevel": "4",
	"chartId": "28",
	"chartMatchId": "19"
},{
	"fieldName": "SA_MeanUplift_norm",
	"chartDescription": "Habitat Change in mean species likelihood under stream alteration scenario",
   "chartType": "UPLIFT",
	"chartLabel": "upstream stream alteration",
	"chartLevel": "4",
	"chartId": "27",
	"chartMatchId": "22"
},{
	"fieldName": "SC_MeanUplift_norm",
	"chartDescription": "Habitat Change in mean species likelihood under stream alteration scenario",
  "chartType": "UPLIFT",
	"chartLabel": "upstream stream cooling",
	"chartLevel": "4",
	"chartId": "26",
	"chartMatchId": "22"
},{
	"fieldName": "UD_MeanUplift_norm",
	"chartDescription": "Habitat Change in mean species likelihood under upstream distance to dams scenario",
  "chartType": "UPLIFT",
	"chartLabel": "upstream distance to dams",
	"chartLevel": "4",
	"chartId": "25",
	"chartMatchId": "21"
},{
	"fieldName": "UE_MeanUplift_norm",
	"chartDescription": "Habitat Change in mean species likelihood under urban expansion",
  "chartType": "UPLIFT",
	"chartLabel": "urban expansion",
	"chartLevel": "4",
	"chartId": "24",
	"chartMatchId": "20"
},{
	"fieldName": "WE_MeanUplift_norm",
	"chartDescription": "Habitat Change in mean species likelihood under wetland expansion scenario",
	"chartType": "UPLIFT",
	"chartLabel": "wetland expansion",
	"chartLevel": "4",
	"chartId": "23",
	"chartMatchId": "19"
},{
	"fieldName": "Hab_uplift_Restoration",
	"chartDescription": "Habitat Uplift Restoration",
	"chartType": "UPLIFT",
	"chartLabel": "Uplift Restoration",
	"chartLevel": "3",
	"chartId": "22",
	"chartMatchId": "2"
}, {
	"fieldName": "Hab_uplift_AqCon",
	"chartDescription": "Habitat Uplift Aquatic Connectivity",
	"chartType": "UPLIFT",
	"chartLabel": "Aquatic Connectivity",
	"chartLevel": "3",
	"chartId": "21",
	"chartMatchId": "2"
}, {
	"fieldName": "Hab_uplift_AdvConv",
	"chartDescription": "Habitat Uplift Avoided Conversion",
	"chartType": "UPLIFT",
	"chartLabel": "Avoided Conversion",
	"chartLevel": "3",
	"chartId": "20",
	"chartMatchId": "2"
}, {
	"fieldName": "Hab_uplift_WetlandsBMPs",
	"chartDescription": "Habitat Wetlands and BMPs",
	"chartType": "UPLIFT",
	"chartLabel": "Wetlands and BMPs",
	"chartLevel": "3",
	"chartId": "19",
	"chartMatchId": "2"
},{
	"fieldName": "N_CMAQ2002KG_uplift_norm",
	"chartDescription": "Nitrogen Source Atmosphere",
	"chartType": "UPLIFT",
	"chartLabel": "Nitrogen Atmosphere",
	"chartLevel": "4",
	"chartId": "18",
	"chartMatchId": "8"
}, {
	"fieldName": "N_AG_uplift_norm",
	"chartDescription": "Nitrogen Source Agriculture",
	"chartType": "UPLIFT",
	"chartLabel": "Nitrogen Agriculture",
	"chartLevel": "4",
	"chartId": "17",
	"chartMatchId": "8"
}, {
	"fieldName": "N_URBAN_uplift_norm",
	"chartDescription": "Nitrogen Source Urban",
	"chartType": "UPLIFT",
	"chartLabel": "Nitrogen Urban",
	"chartLevel": "4",
	"chartId": "16",
	"chartMatchId": "8"
}, {
	"fieldName": "P_URBAN_uplift_norm",
	"chartDescription": "Phosphorus Source Urban",
	"chartType": "UPLIFT",
	"chartLabel": "Phosphorus Urban",
	"chartLevel": "4",
	"chartId": "15",
	"chartMatchId": "7"
}, {
	"fieldName": "P_AG_uplift_norm",
	"chartDescription": "Phosphorus Source Agriculture",
	"chartType": "UPLIFT",
	"chartLabel": "Phosphorus Agriculture",
	"chartLevel": "3",
	"chartId": "14",
	"chartMatchId": "7"
}, {
	"fieldName": "q2yr_uplift_norm",
	"chartDescription": "Hydrology 2 year peak flow",
	"chartType": "UPLIFT",
	"chartLabel": "2 year peak",
	"chartLevel": "3",
	"chartId": "13",
	"chartMatchId": "5"
}, {
	"fieldName": "q10yr_uplift_norm",
	"chartDescription": "Hydrology 50 year peak flow",
	"chartType": "UPLIFT",
	"chartLabel": "50 year peak",
	"chartLevel": "3",
	"chartId": "12",
	"chartMatchId": "5"
}, {
	"fieldName": "q50yr_uplift_norm",
	"chartDescription": "Hydrology 50 year peak flow",
	"chartType": "UPLIFT",
	"chartLabel": "50 year peak",
	"chartLevel": "3",
	"chartId": "11",
	"chartMatchId": "5"
}, {
	"fieldName": "q100yr_uplift_norm",
	"chartDescription": "Hydrology 100 year peak flow",
	"chartType": "UPLIFT",
	"chartLabel": "100 year peak",
	"chartLevel": "3",
	"chartId": "10",
	"chartMatchId": "5"
}, {
	"fieldName": "MeanLikelihood_norm",
	"chartDescription": "Total likelhood that key sepeciecs exists",
	"chartType": "UPLIFT",
	"chartLabel": "Habitat Likelhood",
	"chartLevel": "2",
	"chartId": "9",
	"chartMatchId": "2"
}, {
	"fieldName": "N_total_uplift_norm",
	"chartDescription": "Nitrogen Uplift",
	"chartType": "UPLIFT",
	"chartLabel": "Nitrogen",
	"chartLevel": "3",
	"chartId": "8",
	"chartMatchId": "6"
}, {
	"fieldName": "P_total_uplift_norm",
	"chartDescription": "Phosphorus Uplift",
	"chartType": "UPLIFT",
	"chartLabel": "Phosphorus",
	"chartLevel": "3",
	"chartId": "7",
	"chartMatchId": "6"
}, {
	"fieldName": "WQ_uplift_norm",
	"chartDescription": "Total Water Quality Uplift",
	"chartType": "UPLIFT",
	"chartLabel": "Water Quality",
	"chartLevel": "2",
	"chartId": "6",
	"chartMatchId": "1"
}, {
	"fieldName": "Hydro_uplift_norm",
	"chartDescription": "Total Hydrology Uplift",
	"chartType": "UPLIFT",
	"chartLabel": "Hydrology",
	"chartLevel": "2",
	"chartId": "5",
	"chartMatchId": "1"
}, {
	"fieldName": "Hab_uplift_norm",
	"chartDescription": "Total Habitat Uplift",
	"chartType": "UPLIFT",
	"chartLabel": "Habitat",
	"chartLevel": "2",
	"chartId": "2",
	"chartMatchId": "1"
}, {
	"fieldName": "ALL_uplift",
	"chartDescription": "Total Uplift",
	"chartType": "UPLIFT",
	"chartLabel": "Total",
	"chartLevel": "1",
	"chartId": "1",
	"chartMatchId": "1"
},{
	"fieldName": "HUC_12",
	"chartDescription": "",
	"chartType": "",
	"chartLabel": "",
	"chartLevel": "",
	"chartId": "0",
	"chartMatchId": "0"
}]"""



uplift_Data = """[{
	"fieldName": "Hab_uplift_Restoration",
	"chartDescription": "Habitat Uplift Restoration",
	"chartType": "UPLIFT",
	"chartLabel": "Uplift Restoration",
	"chartLevel": "3",
	"chartId": "22",
	"chartMatchId": "2"
}, {
	"fieldName": "Hab_uplift_AqCon",
	"chartDescription": "Habitat Uplift Aquatic Connectivity",
	"chartType": "UPLIFT",
	"chartLabel": "Aquatic Connectivity",
	"chartLevel": "3",
	"chartId": "21",
	"chartMatchId": "2"
}, {
	"fieldName": "Hab_uplift_AdvConv",
	"chartDescription": "Habitat Uplift Avoided Conversion",
	"chartType": "UPLIFT",
	"chartLabel": "Avoided Conversion",
	"chartLevel": "3",
	"chartId": "20",
	"chartMatchId": "2"
}, {
	"fieldName": "Hab_uplift_WetlandsBMPs",
	"chartDescription": "Habitat Wetlands and BMPs",
	"chartType": "UPLIFT",
	"chartLabel": "Wetlands and BMPs",
	"chartLevel": "3",
	"chartId": "19",
	"chartMatchId": "2"
},{
	"fieldName": "WQ_uplift_norm",
	"chartDescription": "Total Water Quality Uplift",
	"chartType": "UPLIFT",
	"chartLabel": "Water Quality",
	"chartLevel": "2",
	"chartId": "6",
	"chartMatchId": "1"
}, {
	"fieldName": "Hydro_uplift_norm",
	"chartDescription": "Total Hydrology Uplift",
	"chartType": "UPLIFT",
	"chartLabel": "Hydrology",
	"chartLevel": "2",
	"chartId": "5",
	"chartMatchId": "1"
}, {
	"fieldName": "Hab_uplift_norm",
	"chartDescription": "Total Habitat Uplift",
	"chartType": "UPLIFT",
	"chartLabel": "Habitat",
	"chartLevel": "2",
	"chartId": "2",
	"chartMatchId": "1"
}, {
	"fieldName": "ALL_uplift",
	"chartDescription": "Total Uplift",
	"chartType": "UPLIFT",
	"chartLabel": "Total",
	"chartLevel": "1",
	"chartId": "1",
	"chartMatchId": "1"
}]"""

transposedTemplate =[{"fieldname": "ID","fieldType": "TEXT","Length":"150"},
					 {"fieldname": "geography_level","fieldType": "LONG","Length":""},
					 {"fieldname": "geography_match_id","fieldType": "TEXT","Length":"150"},
					 {"fieldname": "geography_label","fieldType": "TEXT","Length":"150"},
					 {"fieldname": "chart_id","fieldType": "LONG","Length":""},
					 {"fieldname": "chart_matchid","fieldType": "LONG","Length":""},
					 {"fieldname": "chart_level","fieldType": "LONG","Length":""},
					 {"fieldname": "chart_label","fieldType": "TEXT","Length":"255"},
					 {"fieldname": "chart_value","fieldType": "TEXT","Length":"255"},
					 {"fieldname": "chart_description","fieldType": "TEXT","Length":"150"},
					 {"fieldname": "chart_type","fieldType": "TEXT","Length":"150"},
					 {"fieldname": "chart_level_label","fieldType": "TEXT","Length":"150"}]







outGDBFull =  os.path.join(outPathGDB, outGDB)

if arcpy.Exists(outGDBFull):
	arcpy.Delete_management(outGDBFull)


arcpy.CreateFileGDB_management (outPathGDB, outGDB, "10.0")

#result data
transposed =  os.path.join(outGDBFull, 'ncdeq_normailized')

arcpy.CreateTable_management(outGDBFull,'ncdeq_normailized')


for field in transposedTemplate:
	fieldName = field['fieldname']
	fieldType = field['fieldType']
	fieldLength = field['Length']
	arcpy.AddField_management(transposed, fieldName, fieldType, "", "", fieldLength, "", "NULLABLE", "NON_REQUIRED", "")

#add name fields for dissovled huc data where do I get that
#update the ago db. later

#check if field exists
def FieldExist(featureclass, fieldname):
	fieldList = arcpy.ListFields(featureclass, fieldname)

	fieldCount = len(fieldList)

	if (fieldCount == 1):
		return True
	else:
		return False


#NHDCat_comb_baseline_Layer = "NHDCat_comb_baseline"
#NHDCat_comb_uplift_Layer = "NHDCat_comb_uplift"

#inputFC =  os.path.join(path, NHDCat_comb_baseline_Layer)

#get fields in input data
#fields = arcpy.ListFields(  os.path.join(path, inputFC)  )

#get json data for how to deal with each field
#input_dict = json.loads(BaseLineData)




geographyLevels =[ {'level':'huc_6','fieldName':'HUC_6','match':'6','geographyLevel':1},
				   {'level':'huc_8','fieldName':'HUC_8','match':'6','geographyLevel':2},
				   {'level':'huc_12','fieldName':'HUC_12','match':'8','geographyLevel':3}]
#    {'level':'Catchment','fieldName':'GRIDCODE','match':'FIRST_HUC_12','geographyLevel':4}]


chartTypes = [{'name':'baseline',
			   'table':'NHDCat_comb_baseline',
			   'fields_conversion':BaseLineData,
			   'fields_dissovled': [['HUC_12','FIRST'],
			   						['ALL_base', 'MEAN'],
			   						['Hab_base_norm','MEAN'],
			   						['Hydro_base_norm', 'MEAN'],
			   						['WQ_base_norm', 'MEAN'],
									['MeanLikelihood_norm','MEAN'],
									['q2yr_base_norm','MEAN'],
									['q10yr_base_norm','MEAN'],
									['q50yr_base_norm','MEAN'],
									['q100yr_base_norm','MEAN'],
									['N_total_base_norm','MEAN'],
									['P_total_base_norm','MEAN'],
									['N_AG_base_norm','MEAN'],
									['N_URBAN_base_norm','MEAN'],
									['N_CMAQ2002KG_base_norm','MEAN'],
									['P_AG_base_norm','MEAN'],
									['P_URBAN_base_norm','MEAN']
								   ]},
				{'name':'uplift',
			   'table':'NHDCat_comb_uplift',
			   'fields_conversion':uplift_Data,
			   'fields_dissovled': [['HUC_12','FIRST'],
			   						['ALL_uplift', 'MEAN'],
			   						['Hab_uplift_WetlandsBMPs', 'MEAN'],
			   						['Hab_uplift_AdvConv','MEAN'],
			   						['Hab_uplift_AqCon', 'MEAN'],
			   						['Hab_uplift_Restoration','MEAN'],
			   						['Hab_uplift_norm','MEAN'],
									['Hydro_uplift_norm', 'MEAN'],
									['WQ_uplift_norm', 'MEAN'],
									['MeanLikelihood_norm','MEAN'],
									['q2yr_uplift_norm','MEAN'],
									['q10yr_uplift_norm','MEAN'],
									['q50yr_uplift_norm','MEAN'],
									['q100yr_uplift_norm','MEAN'],
									['N_total_uplift_norm','MEAN'],
									['P_total_uplift_norm','MEAN'],
									['N_AG_uplift_norm','MEAN'],
									['N_URBAN_uplift_norm','MEAN'],
									['N_CMAQ2002KG_uplift_norm','MEAN'],
									['P_AG_uplift_norm','MEAN'],
									['P_URBAN_uplift_norm','MEAN']
								   ]}]

# {'name':'uplift','table','NHDCat_comb_uplift'}


if arcpy.Exists(transposed):
	arcpy.DeleteRows_management(transposed)

for chartType in chartTypes:
	print 'Chart Type: ' + chartType['name']
	chartTypeName = chartType['name']

	#NHDCat_comb_baseline_Layer = "NHDCat_comb_baseline"
	#NHDCat_comb_uplift_Layer = "NHDCat_comb_uplift"

	inputFC =  os.path.join(path, chartType['table'])

	#get fields in input data
	fields = arcpy.ListFields(  os.path.join(path, inputFC)  )

	#get json data for how to deal with each field
	input_dict = json.loads(chartType['fields_conversion'])

	#check of huc 6 exists if not add and calculae field
	# or is it better to not mutate the data and create a copy... and delete copy after processings
	if not FieldExist(inputFC,'HUC_6'):
		#add field
		arcpy.AddField_management(inputFC, "HUC_6", "TEXT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

		#calc HUC_6
		arcpy.CalculateField_management(inputFC, "HUC_6", "!HUC_12![0:6]", "PYTHON", "")


	for geog in geographyLevels:
		currentGeographyLevel = geog['fieldName']
		print 'Dissolve: ' + currentGeographyLevel
		print '  ' + geog['level']

		temp_dissolve = os.path.join(outGDBFull, geog['level'])
	 	dissolve = os.path.join(outGDBFull, 'dissolve')

		#if feature class exists delete
		if arcpy.Exists(temp_dissolve):
			arcpy.Delete_management(temp_dissolve)

		#dissolve on geographyLevels
		StatisticsFields = chartType['fields_dissovled']
		arcpy.Dissolve_management(inputFC, temp_dissolve, currentGeographyLevel, StatisticsFields, "MULTI_PART", "DISSOLVE_LINES" )
		#"HUC_12 FIRST;ALL_base MEAN;Hab_base_norm MEAN;Hydro_base_norm MEAN;WQ_base_norm MEAN;MeanLikelihood_norm MEAN;q2yr_base_norm MEAN;q10yr_base_norm MEAN;q50yr_base_norm MEAN;q100yr_base_norm MEAN;N_total_base_norm MEAN;P_total_base_norm MEAN;N_AG_base_norm MEAN;N_URBAN_base_norm MEAN;N_CMAQ2002KG_base_norm MEAN;P_AG_base_norm MEAN;P_URBAN_base_norm MEAN", "MULTI_PART", "DISSOLVE_LINES")

		#iterate fields and to send dissolve
		for field in fields:

			#find matching instance of field on data.
			#then use this to construct the dissilove varriables.
			output_dict = [x for x in input_dict if x['fieldName'] == field.name]

			#if field exists in template we will use the field in output ddata.
			#  need to know who we want the table data formated - derieved from tempatle json
			if (output_dict):
				transposeField = output_dict[0]['fieldName']
				temp_transposed = os.path.join(outGDB, 'temp_transposed_' + currentGeographyLevel + '_'  + transposeField)
				# temp_transposed = os.path.join(outGDB,'test')

				#if feature class exists delete
				if arcpy.Exists(temp_transposed):
					arcpy.Delete_management(temp_transposed)

				arcpy.TransposeFields_management(temp_dissolve, "MEAN_" + transposeField +" MEAN_" + transposeField, temp_transposed, "chart_label", "chart_value", currentGeographyLevel + ";FIRST_HUC_12")

				print '  ' + transposeField
				for f in output_dict[0]:
					print '    ' + f

				for field in transposedTemplate:
					fieldName = field['fieldname']
					fieldType = field['fieldType']
					fieldLength = field['Length']
					if not FieldExist(temp_transposed,fieldName):
						arcpy.AddField_management(temp_transposed, fieldName, fieldType, "", "", fieldLength, "", "NULLABLE", "NON_REQUIRED", "")


				# Process: calculate_geography_level
				arcpy.CalculateField_management(temp_transposed, "geography_level",   geog['geographyLevel'], "PYTHON", "")

				# Process: calculate_geography_match_id
				if  geog['level'] == 'Catchment':
					arcpy.CalculateField_management(temp_transposed, "geography_match_id",  "!"+ geog['match']+"!", "PYTHON", "")
				else:
					arcpy.CalculateField_management(temp_transposed, "geography_match_id", "!"+currentGeographyLevel+"![0:"+ geog['match']+"]", "PYTHON", "")

				arcpy.CalculateField_management(temp_transposed, "chart_description", "'" + output_dict[0]['chartDescription'] + "'", "PYTHON", "")

				# Process: Calculate_chart_type
				arcpy.CalculateField_management(temp_transposed, "chart_id","'" + output_dict[0]['chartId'] + "'" , "PYTHON", "")

				# Process: Calculate_chart_type
				arcpy.CalculateField_management(temp_transposed, "chart_matchid","'" + output_dict[0]['chartMatchId'] + "'" , "PYTHON", "")

				# Process: Calculate_chart_type
				arcpy.CalculateField_management(temp_transposed, "chart_type","'" + output_dict[0]['chartType'] + "'" , "PYTHON", "")

				# Process: Calculate_chart_level_label
				arcpy.CalculateField_management(temp_transposed, "chart_level_label", "'" + output_dict[0]['chartLabel'] + "'", "PYTHON", "")

				# Process: Calculate_chart_level
				arcpy.CalculateField_management(temp_transposed, "chart_level", "'" + output_dict[0]['chartLevel'] + "'", "PYTHON", "")

				arcpy.CalculateField_management(temp_transposed, "id", "!" + geog['fieldName'] + "!" , "PYTHON", "")

				# Process: Calculate_id
				arcpy.CalculateField_management(temp_transposed, "geography_label", "'"+ geog['level']+"'", "PYTHON", "")

				#round to two decimealss
				arcpy.CalculateField_management(temp_transposed, "chart_value", "round(float(!chart_value!),8)", "PYTHON", "")

				if FieldExist(inputFC,currentGeographyLevel):
					deleteFields = []
					deleteFields.append(currentGeographyLevel)
					t = arcpy.DeleteField_management(temp_transposed, deleteFields)

				#remove huc12
				if FieldExist(temp_transposed,'FIRST_HUC_12'):
					deleteFields = []
					deleteFields.append('FIRST_HUC_12')
					t = arcpy.DeleteField_management(temp_transposed, deleteFields)

				if FieldExist(temp_dissolve, "MEAN_" + transposeField):
					deleteFields =[]
					deleteFields.append( "MEAN_" + transposeField)
					arcpy.DeleteField_management(temp_dissolve, deleteFields)

				#append to transpose
				arcpy.Append_management(temp_transposed,transposed)

				#delete temp transpose
				if arcpy.Exists(temp_transposed):
					arcpy.Delete_management(temp_transposed)

for geog in geographyLevels:
	temp_dissolve = os.path.join(outGDBFull, geog['level'])

	if FieldExist(temp_dissolve, geog['fieldName']):
		arcpy.AlterField_management(temp_dissolve,  geog['fieldName'], "id", "id", "", "", "NON_NULLABLE", "false")

	if FieldExist(temp_dissolve, 'FIRST_HUC_12'):
		deleteFields =[]
		deleteFields.append('FIRST_HUC_12')
		arcpy.DeleteField_management(temp_dissolve, deleteFields)

#if huc_6 exists delete it
if FieldExist(inputFC,'HUC_6'):
	deleteFields = []
	deleteFields.append('HUC_6')
	t = arcpy.DeleteField_management(inputFC, deleteFields)
